import logging
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)

API_TOKEN = "7789005145:AAEE9g3yuBeMU43XiE8Bnjm5K9lXz8BEBrE"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –§–ò–û.")
    user_data[message.from_user.id] = {"step": "fio"}

@dp.message_handler(commands=['list'])
async def list_participants(message: types.Message):
    try:
        with open("registrations.txt", "r", encoding="utf-8") as f:
            participants = f.readlines()

        if not participants:
            await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")
        else:
            response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è:\n" + "".join(participants)
            await message.reply(response)
    except FileNotFoundError:
        await message.reply("–§–∞–π–ª —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
        return

    step = user_data[user_id].get("step")

    if step == "fio":
        user_data[user_id]["fio"] = message.text
        user_data[user_id]["step"] = "race"
        await message.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ç–∏–ø –∑–∞–±–µ–≥–∞ (5 –∫–º, 10 –∫–º, –º–∞—Ä–∞—Ñ–æ–Ω):")

    elif step == "race":
        user_data[user_id]["race"] = message.text
        fio = user_data[user_id]["fio"]
        race = user_data[user_id]["race"]

        with open("registrations.txt", "a", encoding="utf-8") as f:
            f.write(f"{fio} ‚Äî {race}\n")

        await message.reply(f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω:\nüë§ –§–ò–û: {fio}\nüèÉ –¢–∏–ø –∑–∞–±–µ–≥–∞: {race}")
        user_data.pop(user_id)

if name == 'main':
    executor.start_polling(dp, skip_updates=True)